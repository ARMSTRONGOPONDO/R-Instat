' R- Instat
' Copyright (C) 2015-2017
'
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License 
' along with this program.  If not, see <http://www.gnu.org/licenses/>.

Imports RDotNet
Imports instat.Translations
Public Class dlgScript
    Private strComment As String = "Code generated by the dialog, Script"
    Private bFirstload As Boolean = True
    Private bReset As Boolean = True
    Private clsSaveDataFunction As New RFunction
    Private dctOutputObjectTypes As New Dictionary(Of String, String)
    Private dctOutputObjectFormats As New Dictionary(Of String, String)

    Private Sub dlgScript_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        If bFirstload Then
            InitialiseDialog()
            bFirstload = False
        End If
        If bReset Then
            SetDefaults()
        End If
        SetRCodeForControls(bReset)
        bReset = False
        autoTranslate(Me)
    End Sub

    Private Sub InitialiseDialog()

        'todo. the iCallType will probably be dynamic
        'ucrBase.clsRsyntax.iCallType = 2
        'ucrBase.clsRsyntax.bSeparateThread = False

        'dctOutputObjectTypes.Add("Objects", "object")
        dctOutputObjectTypes.Add("Summary", RObjectTypeLabel.Summary)
        dctOutputObjectTypes.Add("Table", RObjectTypeLabel.Table)
        dctOutputObjectTypes.Add("Graph", RObjectTypeLabel.Graph)
        dctOutputObjectTypes.Add("Model", RObjectTypeLabel.Model)
        dctOutputObjectTypes.Add("Structure", RObjectTypeLabel.StructureLabel)

        dctOutputObjectFormats.Add("Image", RObjectFormat.Image)
        dctOutputObjectFormats.Add("Text", RObjectFormat.Text)
        dctOutputObjectFormats.Add("Html", RObjectFormat.Html)

        '--------------------------------
        ' Library controls

        'todo. this combobox can be a custom package control in future. Its also needed in dlgHelpVignettes
        ucrCboLibPackage.SetParameter(New RParameter("package", 0))
        ucrCboLibPackage.SetItems(GetPackages(), bAddConditions:=True)
        ucrCboLibPackage.SetDropDownStyleAsNonEditable()

        '--------------------------------
        'save controls
        ucrPnlSaveData.AddRadioButton(rdoSaveDataFrame)
        ucrPnlSaveData.AddRadioButton(rdoSaveColumn)
        ucrPnlSaveData.AddRadioButton(rdoSaveOutputObject)

        ucrCboSaveOutputObjectType.SetItems(dctOutputObjectTypes, bSetConditions:=False)
        ucrCboSaveOutputObjectType.SetDropDownStyleAsNonEditable()
        ucrCboSaveOutputObjectType.SetLinkedDisplayControl(lblSaveObjectType)
        ucrCboSaveOutputObjectType.GetSetSelectedIndex = 0

        ucrCboSaveOutputObjectFormat.SetItems(dctOutputObjectFormats, bSetConditions:=False)
        ucrCboSaveOutputObjectFormat.SetDropDownStyleAsNonEditable()
        ucrCboSaveOutputObjectFormat.SetLinkedDisplayControl(lblSaveObjectFormat)
        ucrCboSaveOutputObjectFormat.GetSetSelectedIndex = 0

        ucrSaveData.SetSaveTypeAsGraph()
        ucrSaveData.SetCheckBoxText("Save Graph")
        ucrSaveData.SetIsComboBox()
        ucrSaveData.SetDataFrameSelector(ucrDataFrameSaveOutputSelect)


        '--------------------------------
        'Get data controls

        ucrPnlGetData.AddRadioButton(rdoGetDataFrame)
        ucrPnlGetData.AddRadioButton(rdoGetColumn)
        ucrPnlGetData.AddRadioButton(rdoGetOutputObject)

        ucrDataFrameGetDF.SetLabelText("Get Data Frame:")

        ucrCboGetOutputObjectType.SetItems(dctOutputObjectTypes, bSetConditions:=False)
        ucrCboGetOutputObjectType.SetDropDownStyleAsNonEditable()
        ucrCboGetOutputObjectType.SetLinkedDisplayControl(lblGetObjectType)
        ucrCboGetOutputObjectType.GetSetSelectedIndex = 0

        ucrReceiverGetObject.Selector = ucrSelectorGetObject
        ucrReceiverGetObject.SetMeAsReceiver()
        ucrReceiverGetObject.bAutoFill = True
        ucrReceiverGetObject.SetLinkedDisplayControl(lblGetObject)

        '-------------------------------
        ' Hide base button comment controls

        ucrBase.chkComment.Checked = False
        ucrBase.chkComment.Visible = False
        ucrBase.txtComment.Visible = False


    End Sub

    'todo. this function should eventually be removed once we have a control that displays packages
    Private Function GetPackages() As String()
        Dim arrAvailablePackages() As String = {}
        Dim clsGetPackages As New RFunction
        clsGetPackages.SetRCommand("get_installed_packages_with_data")
        clsGetPackages.AddParameter("with_data", "FALSE")
        Dim expPackageNames As SymbolicExpression = frmMain.clsRLink.RunInternalScriptGetValue(clsGetPackages.ToScript(), bSeparateThread:=False, bSilent:=True)
        If expPackageNames IsNot Nothing AndAlso expPackageNames.Type <> Internals.SymbolicExpressionType.Null Then
            arrAvailablePackages = expPackageNames.AsCharacter.ToArray
            Array.Sort(arrAvailablePackages)
        End If
        Return arrAvailablePackages
    End Function

    Private Sub SetDefaults()

        ' Library controls
        ucrCboLibPackage.Reset()

        ' Save controls reset
        rdoSaveDataFrame.Checked = True
        ucrDataFrameSaveOutputSelect.Reset()
        ucrSaveData.Reset()

        ' Get controls
        ucrDataFrameGetDF.Reset()
        rdoGetDataFrame.Checked = True
        ucrCboGetOutputObjectType.GetSetSelectedIndex = 0
        ucrSelectorGetObject.Reset()


        ' Script text control reset 
        'txtScript.Text = "# Code generated by the dialog, Script" & Environment.NewLine



        'ucrBase.clsRsyntax.SetBaseRFunction(clsGetDataObjectFunction)
    End Sub



    Private Sub SetRCodeForControls(bReset As Boolean)
        ucrSaveData.SetRCode(clsSaveDataFunction, bReset)
    End Sub

    Private Sub ucrCboLibPackage_ControlValueChanged(ucrChangedControl As ucrCore) Handles ucrCboLibPackage.ControlContentsChanged
        Dim clsLibraryFunction As New RFunction
        clsLibraryFunction.SetRCommand("library")
        clsLibraryFunction.AddParameter("package", Chr(34) & ucrCboLibPackage.GetText() & Chr(34))
        PreviewScript(clsLibraryFunction.ToScript)
    End Sub

    Private Sub ucrPnlGetData_ControlValueChanged(ucrChangedControl As ucrCore) Handles ucrPnlGetData.ControlValueChanged
        ucrDataFrameGetDF.SetVisible(False)
        ucrCboGetOutputObjectType.SetVisible(False)
        ucrSelectorGetObject.SetVisible(False)
        ucrReceiverGetObject.SetVisible(False)
        If rdoGetDataFrame.Checked Then
            ucrDataFrameGetDF.SetVisible(True)
            ucrReceiverGetObject.SetVisible(False)
            ucrDataFrameGetDF.Reset()
        ElseIf rdoGetColumn.Checked Then
            ucrSelectorGetObject.SetVisible(True)
            ucrReceiverGetObject.SetVisible(True)
            SetupReceiverForGetData("Column", RObjectTypeLabel.Column)
        ElseIf rdoGetOutputObject.Checked Then
            ucrSelectorGetObject.SetVisible(True)
            ucrCboGetOutputObjectType.SetVisible(True)
            lblGetObject.Text = ucrCboGetOutputObjectType.GetText()
            ucrReceiverGetObject.SetVisible(True)
            SetupReceiverForGetData(ucrCboGetOutputObjectType.GetText(), dctOutputObjectTypes.Item(ucrCboGetOutputObjectType.GetText()))
        End If
    End Sub

    Private Sub SetupReceiverForGetData(strLabel As String, strDataType As String)
        ucrReceiverGetObject.Clear()
        lblGetObject.Text = strLabel & ":"
        ucrReceiverGetObject.SetSelectorHeading(strLabel)
        ucrReceiverGetObject.SetItemType(strDataType)
    End Sub

    Private Sub ucrDataFrameGet_ControlValueChanged(ucrChangedControl As ucrCore) Handles ucrDataFrameGetDF.ControlContentsChanged
        Dim strAssignedScript As String = ""
        Dim strAssignedTo As String = ucrDataFrameGetDF.clsCurrDataFrame.Clone().ToScript(strAssignedScript)
        PreviewScript(strAssignedScript)
    End Sub

    Private Sub ucrInputGetObjectType_ControlValueChanged(ucrChangedControl As ucrCore) Handles ucrCboGetOutputObjectType.ControlValueChanged
        If Not ucrCboGetOutputObjectType.IsEmpty() Then
            SetupReceiverForGetData(ucrCboGetOutputObjectType.GetText(), dctOutputObjectTypes.Item(ucrCboGetOutputObjectType.GetText()))
        End If
    End Sub

    Private Sub ucrReceiverGet_ControlValueChanged(ucrChangedControl As ucrCore) Handles ucrReceiverGetObject.ControlContentsChanged
        'If ucrReceiverGet.IsEmpty Then
        '    Exit Sub
        'End If

        Dim clsFunction As RFunction = ucrReceiverGetObject.GetVariables()
        Dim strAssignedScript As String = ""
        Dim strAssignedTo As String = clsFunction.ToScript(strScript:=strAssignedScript)
        PreviewScript(strAssignedScript)
    End Sub

    Private Sub ucrPnlSaveData_ControlValueChanged(ucrChangedControl As ucrCore) Handles ucrPnlSaveData.ControlValueChanged
        ucrDataFrameSaveOutputSelect.SetVisible(False)
        ucrCboSaveOutputObjectType.SetVisible(False)
        ucrCboSaveOutputObjectFormat.SetVisible(False)
        If rdoSaveDataFrame.Checked Then
            SetupSaveDataControl("Data Frame", RObjectTypeLabel.Dataframe, "")
        ElseIf rdoSaveColumn.Checked Then
            ucrDataFrameSaveOutputSelect.SetVisible(True)
            ucrCboSaveOutputObjectType.SetVisible(True)
            SetupSaveDataControl("Column", RObjectTypeLabel.Column, "")
        ElseIf rdoSaveOutputObject.Checked Then
            ucrDataFrameSaveOutputSelect.SetVisible(True)
            ucrCboSaveOutputObjectType.SetVisible(True)
            ucrCboSaveOutputObjectFormat.SetVisible(True)
            SetupSaveDataControl(ucrCboSaveOutputObjectType.GetText(), dctOutputObjectTypes.Item(ucrCboSaveOutputObjectType.GetText()), dctOutputObjectFormats.Item(ucrCboSaveOutputObjectFormat.GetText()))
        End If
    End Sub

    Private Sub ucrCboSaveOutputObjectTypee_ControlValueChanged(ucrChangedControl As ucrCore) Handles ucrCboSaveOutputObjectType.ControlValueChanged, ucrCboSaveOutputObjectFormat.ControlValueChanged
        If Not ucrCboSaveOutputObjectType.IsEmpty() AndAlso Not ucrCboSaveOutputObjectFormat.IsEmpty() Then
            SetupSaveDataControl(ucrCboSaveOutputObjectType.GetText(), dctOutputObjectTypes.Item(ucrCboSaveOutputObjectType.GetText()), dctOutputObjectFormats.Item(ucrCboSaveOutputObjectFormat.GetText()))
        End If
    End Sub

    Private Sub SetupSaveDataControl(strLabel As String, strDataType As String, strFormat As String)
        ucrSaveData.SetLabelText(strLabel & ":")
        ucrSaveData.SetSaveType(strDataType, strFormat)
    End Sub

    Private Sub ucrSaveData_ControlValueChanged(ucrChangedControl As ucrCore) Handles ucrSaveData.ControlContentsChanged
        'If ucrReceiverGet.IsEmpty Then
        '    Exit Sub
        'End If


        Dim strAssignedScript As String = ""
        Dim strAssignedTo As String = clsSaveDataFunction.Clone.ToScript(strScript:=strAssignedScript)
        PreviewScript(strAssignedScript)
    End Sub

    'Private Sub btnSaveNewDataframe_Click(sender As Object, e As EventArgs)
    '    If ucrInputSaveDataFrame.IsEmpty Then
    '        Exit Sub
    '    End If

    '    Dim clsImportNewDataFrame As New RFunction
    '    Dim clsRFunctionList As New RFunction

    '    clsImportNewDataFrame.SetRCommand("data_book$import_data")

    '    clsRFunctionList.SetRCommand("list")
    '    clsRFunctionList.AddParameter(ucrInputSaveDataFrame.GetText(), ucrInputSaveDataFrame.GetText())
    '    clsImportNewDataFrame.AddParameter("data_tables", clsRFunctionList.ToScript)

    '    PreviewScript(ucrInputSaveDataFrame.GetText() & "<-" & Environment.NewLine & clsImportNewDataFrame.ToScript)
    'End Sub

    'Private Sub btnSaveNewColumn_Click(sender As Object, e As EventArgs)
    '    If Not ucrSaveData.IsComplete Then
    '        Exit Sub
    '    End If

    '    Dim strAssignedScript As String = ""
    '    'clone the function first because the ToScript function modifies the contents of the function.
    '    Dim strAssignedTo As String = clsSaveColumnFunction.Clone.ToScript(strScript:=strAssignedScript)
    '    PreviewScript(strAssignedScript)
    '    AddAssignToString(ucrSaveData.GetText)
    'End Sub

    'Private Sub btnSaveNewGraph_Click(sender As Object, e As EventArgs)
    '    If Not ucrSaveGraph.IsComplete Then
    '        Exit Sub
    '    End If

    '    Dim strAssignedScript As String = ""
    '    'clone the function first because the ToScript function modifies the contents of the function.
    '    Dim strGetScript As String = clsSaveGraphFunction.Clone.ToScript(strScript:=strAssignedScript)
    '    PreviewScript(strAssignedScript.Trim & Environment.NewLine & strGetScript)
    '    AddAssignToString(ucrSaveGraph.GetText)
    'End Sub

    Private Sub btnRemoveObjects_Click(sender As Object, e As EventArgs) Handles btnRemoveObjects.Click
        'create function to remove the objects added in the script
        'Dim clsRemoveFunc As New RFunction
        'Dim clsRemoveListFun As New RFunction
        'clsRemoveFunc.SetRCommand("rm")
        'clsRemoveListFun.SetRCommand("c")
        'For i As Integer = 0 To lstAssignToStrings.Count - 1
        '    clsRemoveListFun.AddParameter(i, Chr(34) & lstAssignToStrings(i) & Chr(34), bIncludeArgumentName:=False)
        'Next
        'clsRemoveFunc.AddParameter("list", clsRFunctionParameter:=clsRemoveListFun)

        'PreviewScript(clsRemoveFunc.ToScript())
    End Sub

    Private Sub txtScript_TextChanged(sender As Object, e As EventArgs) Handles txtScript.TextChanged
        ucrBase.clsRsyntax.SetCommandString(txtScript.Text)
        ucrBase.OKEnabled(txtScript.Text.Length > 0)
    End Sub

    Private Sub ucrBase_ClickReset(sender As Object, e As EventArgs) Handles ucrBase.ClickReset
        SetDefaults()
        SetRCodeForControls(True)
    End Sub

    Private Sub ucrBase_ClickOk(sender As Object, e As EventArgs) Handles ucrBase.ClickOk
        frmMain.clsRLink.RunScriptFromWindow(strNewScript:=txtScript.Text, strNewComment:=strComment)
    End Sub

    Private Sub PreviewScript(strNewScript As String)
        txtScript.Text = strNewScript.Trim() & Environment.NewLine
        txtScript.SelectionStart = txtScript.Text.Length
        txtScript.ScrollToCaret()
        txtScript.Refresh()
    End Sub



End Class